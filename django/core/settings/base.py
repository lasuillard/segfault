"""
Django settings for segfault project.

Generated by 'django-admin startproject' using Django 2.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import json

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.environ.get('DEBUG', False))

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Load secret.json file
try:
    with open(os.path.join(BASE_DIR, 'secret.json')) as f:
        SECRETS = json.load(f)

except FileNotFoundError:
    # load secrets from os envs
    SECRETS = {
        'DJANGO_SECRET_KEY': os.environ.get('DJANGO_SECRET_KEY'),
        'FCM_SERVER_KEY': os.environ.get('FCM_SERVER_KEY'),
        'OAUTH': [
            {
                'PROVIDER': 'naver',
                'NAME': 'Naver',
                'CLIENT_ID': os.environ.get('NAVER_OAUTH2_CLIENT_ID'),
                'CLIENT_SECRET': os.environ.get('NAVER_OAUTH2_CLIENT_SECRET')
            },
            {
                'PROVIDER': 'kakao',
                'NAME': 'Kakao',
                'CLIENT_ID': os.environ.get('KAKAO_OAUTH2_CLIENT_SECRET'),
                'CLIENT_SECRET': os.environ.get('KAKAO_OAUTH2_CLIENT_SECRET')
            },
            {
                'PROVIDER': 'google',
                'NAME': 'Google',
                'CLIENT_ID': os.environ.get('GOOGLE_OAUTH2_CLIENT_ID'),
                'CLIENT_SECRET': os.environ.get('GOOGLE_OAUTH2_CLIENT_SECRET')
            },
            # more services should be dealt here too, not only secret.json
        ]
    }

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = SECRETS['DJANGO_SECRET_KEY']

URL_FRONT = ''

ALLOWED_HOSTS = ['localhost', '127.0.0.1']

# Application definition
INSTALLED_APPS = [
    'channels',
    'django.contrib.admin',
    'django.contrib.admindocs',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django_extensions',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',  # for CORS(cross-origin resource sharing)
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.naver',
    'allauth.socialaccount.providers.kakao',
    'allauth.socialaccount.providers.google',
    'rest_auth',
    'rest_auth.registration',
    'fcm_django',
    # custom apps
    'core',
    'api',
    'ws',
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# django-allauth config
ACCOUNT_ADAPTER = 'auth.adapter.CustomAccountAdapter'

ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_AUTHENTICATION_METHOD = 'email'

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True

ACCOUNT_USERNAME_REQUIRED = False
# ACCOUNT_USERNAME_BLACKLIST = ['SegFault', 'root']

SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_EMAIL_REQUIRED = False

# ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = '/'

OLD_PASSWORD_FIELD_ENABLED = True

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication'
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAdminUser'
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer'
        #  'api.renderers.BrowsableAPIRendererWithoutForms'
    ],
    'DEFAULT_PAGINATION_CLASS': 'api.pagination.TinyLimitOffsetPagination',
    'PAGE_SIZE': 10,
}

REST_AUTH_SERIALIZERS = {
    'USER_DETAILS_SERIALIZER': 'api.v1.serializers.UserDetailSerializer'
}

FCM_DJANGO_SETTINGS = {
    'APP_VERBOSE_NAME': 'SegFault',
    'FCM_SERVER_KEY': SECRETS['FCM_SERVER_KEY'],
    'ONE_DEVICE_PER_USER': False,
    'DELETE_INACTIVE_DEVICES': True,
}

# django
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

SITE_ID = 1

ROOT_URLCONF = 'core.urls'

TEMPLATE_DIR = os.path.join(BASE_DIR, 'dist')
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR, ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-US'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static and Media Files
STATIC_ROOT = 'staticfiles'  # os.path.normpath(os.path.join(BASE_DIR, 'staticfiles'))
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    TEMPLATE_DIR,
    os.path.join(BASE_DIR, 'static'),
]
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Logging
"""
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(asctime)s %(levelname)-8s %(name).%(module): %(message)s',
        },
        'simple': {
            'format': '%(asctime)s %(levelname)-8s %(name).%(module): %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
    },
    'filters': {
        'debug': {
            '()': 'django.utils.log.RequireDebugTrue'
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['debug'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'applog': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': f'log/app.log',
            'formatter': 'verbose',
            'maxBytes': 1024*1024*10,  # 10MB
            'backupCount': 10,
        },
    },
    'loggers': {
        '': {
            'level': 'DEBUG',
            'handlers': ['applog'],
        },
        'django.request': {
            'level': 'INFO',
            'handlers': ['console'],
            'propagate': False,
        }
    },
}
"""
